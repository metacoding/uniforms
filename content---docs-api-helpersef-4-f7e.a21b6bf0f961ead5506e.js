(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{52:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",function(){return o}),n.d(a,"rightToc",function(){return r}),n.d(a,"default",function(){return d});n(0);var t=n(115);n(116);function c(){return(c=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}function s(e,a){if(null==e)return{};var n,t,c=function(e,a){if(null==e)return{};var n,t,c={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||(c[n]=e[n]);return c}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var o={id:"api-helpers",title:"Helpers"},r=[{value:"changedKeys",id:"changedkeys",children:[]},{value:"connectField",id:"connectfield",children:[]},{value:"createSchemaBridge",id:"createschemabridge",children:[]},{value:"createSchemaBridge.register",id:"createschemabridgeregister",children:[]},{value:"filterDOMProps",id:"filterdomprops",children:[]},{value:"filterDOMProps.register",id:"filterdompropsregister",children:[]},{value:"filterDOMProps.registered",id:"filterdompropsregistered",children:[]},{value:"injectName",id:"injectname",children:[]},{value:"joinName",id:"joinname",children:[]},{value:"nothing",id:"nothing",children:[]},{value:"randomIds",id:"randomids",children:[]}],m={rightToc:r},p="wrapper";function d(e){var a=e.components,n=s(e,["components"]);return Object(t.a)(p,c({},m,n,{components:a,mdxType:"MDXLayout"}),Object(t.a)("h2",null,Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"changedkeys"})),Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#changedkeys"}),"#"),Object(t.a)("inlineCode",{parentName:"h2"},"changedKeys")),Object(t.a)("pre",{className:"language-js"},Object(t.a)("code",c({parentName:"pre"},{className:"language-js"}),Object(t.a)("span",c({parentName:"code"},{className:"token keyword module"}),"import")," changedKeys ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword module"}),"from")," ",Object(t.a)("span",c({parentName:"code"},{className:"token string"}),"'uniforms/changedKeys'"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// Returns an array of changed keys between valueA and valueB, where root is the"),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// root key."),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"const")," arrayOfChangedKeys ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.a)("span",c({parentName:"code"},{className:"token function"}),"changedKeys"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"root",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," valueA",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," valueB",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(t.a)("p",null,Object(t.a)("strong",{parentName:"p"},"Note:")," For more examples, see ",Object(t.a)("a",c({parentName:"p"},{href:"https://github.com/vazco/uniforms/blob/master/packages/uniforms/test/helpers/changedKeys.js"}),Object(t.a)("inlineCode",{parentName:"a"},"changedKeys")," tests"),"."),Object(t.a)("h2",null,Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"connectfield"})),Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#connectfield"}),"#"),Object(t.a)("inlineCode",{parentName:"h2"},"connectField")),Object(t.a)("pre",{className:"language-js"},Object(t.a)("code",c({parentName:"pre"},{className:"language-js"}),Object(t.a)("span",c({parentName:"code"},{className:"token keyword module"}),"import")," connectField ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword module"}),"from")," ",Object(t.a)("span",c({parentName:"code"},{className:"token string"}),"'uniforms/connectField'"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"const")," ",Object(t.a)("span",c({parentName:"code"},{className:"token maybe-class-name"}),"ComponentXField")," ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.a)("span",c({parentName:"code"},{className:"token function"}),"connectField"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(t.a)("span",c({parentName:"code"},{className:"token maybe-class-name"}),"ComponentX"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// Props mapper"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"//   Useful for integration with third-party components. For example, you"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"//   can rename specific props instead of doing mapping by hand in the"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"//   component."),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token function-variable function"}),"mapProps"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),":")," ",Object(t.a)("span",c({parentName:"code"},{className:"token parameter"}),"props")," ",Object(t.a)("span",c({parentName:"code"},{className:"token arrow operator"}),"=>")," props",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),","),"\n\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// Base field class"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"//   It's reserved for the future - right now there's no useful usecase."),"\n  baseField",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),":")," ",Object(t.a)("span",c({parentName:"code"},{className:"token maybe-class-name"}),"BaseField"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),","),"\n\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// <input> helper"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"//   In React, <input> can't have undefined or null value and any onChange"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"//   at once - this option passes 'undefined' as en empty string."),"\n  ensureValue",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),":")," ",Object(t.a)("span",c({parentName:"code"},{className:"token boolean"}),"true"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),","),"\n\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// Initial value check"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"//   If truthy, then after the first render defaultValue is set as value if"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"//   no value is provided (undefined)."),"\n  initialValue",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),":")," ",Object(t.a)("span",c({parentName:"code"},{className:"token boolean"}),"true"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),","),"\n\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// Additional parent prop"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"//   If truthy, additional parent prop is provided (if any). Useful for"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"//   nested or complex fields."),"\n  includeParent",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),":")," ",Object(t.a)("span",c({parentName:"code"},{className:"token boolean"}),"false"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),","),"\n\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// Field name chain visibility"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"//   If truthy, then every nested field name will be prefixed with parent"),"\n  ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"//   name."),"\n  includeInChain",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),":")," ",Object(t.a)("span",c({parentName:"code"},{className:"token boolean"}),"true"),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(t.a)("h2",null,Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"createschemabridge"})),Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#createschemabridge"}),"#"),Object(t.a)("inlineCode",{parentName:"h2"},"createSchemaBridge")),Object(t.a)("pre",{className:"language-js"},Object(t.a)("code",c({parentName:"pre"},{className:"language-js"}),Object(t.a)("span",c({parentName:"code"},{className:"token keyword module"}),"import")," createSchemaBridge ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword module"}),"from")," ",Object(t.a)("span",c({parentName:"code"},{className:"token string"}),"'uniforms/createSchemaBridge'"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// It's rather an internal helper, but it's still exported. Use it, if you want"),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// to manually create a schema bridge or to test your bridge. It will throw on"),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// an unrecognised schema."),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"const")," bridge ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.a)("span",c({parentName:"code"},{className:"token function"}),"createSchemaBridge"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"schemaOrBridge",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(t.a)("h2",null,Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"createschemabridgeregister"})),Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#createschemabridgeregister"}),"#"),Object(t.a)("inlineCode",{parentName:"h2"},"createSchemaBridge"),".register"),Object(t.a)("pre",{className:"language-js"},Object(t.a)("code",c({parentName:"pre"},{className:"language-js"}),Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// If you want to register a custom bridge."),"\ncreateSchemaBridge",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(t.a)("span",c({parentName:"code"},{className:"token method function property-access"}),"register"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"propA",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," propB",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," propC ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"/* ... */"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(t.a)("h2",null,Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"filterdomprops"})),Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#filterdomprops"}),"#"),Object(t.a)("inlineCode",{parentName:"h2"},"filterDOMProps")),Object(t.a)("pre",{className:"language-js"},Object(t.a)("code",c({parentName:"pre"},{className:"language-js"}),Object(t.a)("span",c({parentName:"code"},{className:"token keyword module"}),"import")," filterDOMProps ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword module"}),"from")," ",Object(t.a)("span",c({parentName:"code"},{className:"token string"}),"'uniforms/filterDOMProps'"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// If you create your custom field, then it's a safe way to get rid of all"),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// uniforms-related props."),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"const")," nonUniformsProps ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.a)("span",c({parentName:"code"},{className:"token function"}),"filterDOMProps"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"props",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(t.a)("h2",null,Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"filterdompropsregister"})),Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#filterdompropsregister"}),"#"),Object(t.a)("inlineCode",{parentName:"h2"},"filterDOMProps"),".register"),Object(t.a)("pre",{className:"language-js"},Object(t.a)("code",c({parentName:"pre"},{className:"language-js"}),Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// If you want to filter additional props, then you have to register it."),"\nfilterDOMProps",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(t.a)("span",c({parentName:"code"},{className:"token method function property-access"}),"register"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"propA",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," propB",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," propC ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"/* ... */"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(t.a)("h2",null,Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"filterdompropsregistered"})),Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#filterdompropsregistered"}),"#"),Object(t.a)("inlineCode",{parentName:"h2"},"filterDOMProps"),".registered"),Object(t.a)("pre",{className:"language-js"},Object(t.a)("code",c({parentName:"pre"},{className:"language-js"}),Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// Array of already registered props."),"\nfilterDOMProps",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(t.a)("span",c({parentName:"code"},{className:"token property-access"}),"registered"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";")," ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// ['propA', 'propB', ...]"),"\n")),Object(t.a)("h2",null,Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"injectname"})),Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#injectname"}),"#"),Object(t.a)("inlineCode",{parentName:"h2"},"injectName")),Object(t.a)("pre",{className:"language-js"},Object(t.a)("code",c({parentName:"pre"},{className:"language-js"}),Object(t.a)("span",c({parentName:"code"},{className:"token keyword module"}),"import")," injectName ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword module"}),"from")," ",Object(t.a)("span",c({parentName:"code"},{className:"token string"}),"'uniforms/injectName'"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// It's rather an internal helper, but it's still exported. Injects name to all"),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// already rendered fields."),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"const")," componentWithInjectedName ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.a)("span",c({parentName:"code"},{className:"token function"}),"injectName"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"name",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," component",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(t.a)("h2",null,Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"joinname"})),Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#joinname"}),"#"),Object(t.a)("inlineCode",{parentName:"h2"},"joinName")),Object(t.a)("pre",{className:"language-js"},Object(t.a)("code",c({parentName:"pre"},{className:"language-js"}),Object(t.a)("span",c({parentName:"code"},{className:"token keyword module"}),"import")," joinName ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword module"}),"from")," ",Object(t.a)("span",c({parentName:"code"},{className:"token string"}),"'uniforms/joinName'"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// Use it to safely join partial field names. If you create a custom field with"),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// subfields, then it's better to use this helper."),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"const")," joinedNameString ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.a)("span",c({parentName:"code"},{className:"token function"}),"joinName"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"nameA",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," nameB",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," nameC ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"/* ... */"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),'// If you want to have a "raw" version of a name, then pass null as the first'),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// param."),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"const")," joinedNameArray ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.a)("span",c({parentName:"code"},{className:"token function"}),"joinName"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(t.a)("span",c({parentName:"code"},{className:"token keyword null nil"}),"null"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," nameA",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," nameB",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),",")," nameC ",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"/* ... */"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(t.a)("h2",null,Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"nothing"})),Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#nothing"}),"#"),Object(t.a)("inlineCode",{parentName:"h2"},"nothing")),Object(t.a)("pre",{className:"language-js"},Object(t.a)("code",c({parentName:"pre"},{className:"language-js"}),Object(t.a)("span",c({parentName:"code"},{className:"token keyword module"}),"import")," nothing ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword module"}),"from")," ",Object(t.a)("span",c({parentName:"code"},{className:"token string"}),"'uniforms/nothing'"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// In React@0.14 you can't return null from functional component, but in"),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),'// React@15 you should use null - nothing is a "safe null". Basically it\'s a'),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// <noscript /> in @0.14 and null in @15."),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"const")," ",Object(t.a)("span",c({parentName:"code"},{className:"token function-variable function"}),"emptyJSX")," ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(t.a)("span",c({parentName:"code"},{className:"token arrow operator"}),"=>")," nothing",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n")),Object(t.a)("h2",null,Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"randomids"})),Object(t.a)("a",c({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#randomids"}),"#"),Object(t.a)("inlineCode",{parentName:"h2"},"randomIds")),Object(t.a)("pre",{className:"language-js"},Object(t.a)("code",c({parentName:"pre"},{className:"language-js"}),Object(t.a)("span",c({parentName:"code"},{className:"token keyword module"}),"import")," randomIds ",Object(t.a)("span",c({parentName:"code"},{className:"token keyword module"}),"from")," ",Object(t.a)("span",c({parentName:"code"},{className:"token string"}),"'uniforms/randomIds'"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// It's rather an internal helper, but it's still exported. Use it, if you want"),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// to have some random but deterministic strings."),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"const")," predictableRandomIdGenerator ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.a)("span",c({parentName:"code"},{className:"token function"}),"randomIds"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"prefix",Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"const")," predictableRandomIdA ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.a)("span",c({parentName:"code"},{className:"token function"}),"predictableRandomIdGenerator"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"const")," predictableRandomIdB ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.a)("span",c({parentName:"code"},{className:"token function"}),"predictableRandomIdGenerator"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token keyword"}),"const")," predictableRandomIdC ",Object(t.a)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(t.a)("span",c({parentName:"code"},{className:"token function"}),"predictableRandomIdGenerator"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(t.a)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(t.a)("span",c({parentName:"code"},{className:"token comment"}),"// ..."),"\n")))}d.isMDXComponent=!0}}]);